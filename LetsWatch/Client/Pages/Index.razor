@page "/"
@using LetsWatch.Client.Dto
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject HttpClient Http

<PageTitle>Let's Watch</PageTitle>

<div class="p-4 vh-90">
    @if (_loggedIn)
    {
        <div class="d-flex flex-column h-100">
            <div class="d-flex flex-grow-1 align-items-center">
                <div class="card border-primary admin-max-width mx-auto">
                    <div class="card-body">
                        <h4 class="card-title m-0">Admin panel</h4>
                        <div>
                            <div class="mx-1">
                                <label class="col-form-label col-form-label-sm">Title</label>
                                <input @bind-value="Title" class="form-control form-control-sm" type="text" placeholder="Title">
                            </div>
                            <div class="d-flex justify-content-center">
                                <div class="mx-1 mt-1">
                                    <label class="col-form-label col-form-label-sm">Hours</label>
                                    <input @bind-value="Hours" class="form-control form-control-sm" type="text" placeholder="Hours">
                                </div>
                                <div class="mx-1 mt-1">
                                    <label class="col-form-label col-form-label-sm">Minutes</label>
                                    <input @bind-value="Minutes" class="form-control form-control-sm" type="text" placeholder="Minutes">
                                </div>
                                <div class="mx-1 mt-1">
                                    <label class="col-form-label col-form-label-sm">Seconds</label>
                                    <input @bind-value="Seconds" class="form-control form-control-sm" type="text" placeholder="Seconds">
                                </div>
                            </div>
                            <div class="mt-3 mx-1 ">
                                <button @onclick="OnUpdate" type="button" class="btn btn-success">@UpdateButtonText</button>
                            </div>
                            <div class="mt-4 d-flex align-bottom">
                                <div class="w-100">
                                    <label class="col-form-label col-form-label-sm">User link</label>
                                    <input @bind-value="UserLink" class="form-control form-control-sm" type="text" placeholder="User link" readonly="">
                                </div>
                                <div class="ms-2 mt-auto">
                                    <button @onclick="OnCopy" type="button" class="btn btn-info">@CopyButtonText</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="d-flex flex-column flex-grow-1 h-100 justify-content-center">
            <div class="mx-auto">
                <input @oninput="OnCode" type="text" placeholder="Code">
            </div>
        </div>
    }
</div>

@code {
    private bool _loggedIn = false;

    public Guid AdminSession { get; set; } = Guid.NewGuid();
    public Guid UserSession { get; set; } = Guid.NewGuid();
    public string UpdateButtonText { get; set; } = "Update";
    public string CopyButtonText { get; set; } = "Copy";
    public string Title { get; set; } = string.Empty;
    public string Hours { get; set; }
    public string Minutes { get; set; }
    public string Seconds { get; set; }
    public string UserLink { get; set; }

    public void OnCode(ChangeEventArgs changeEventArgs)
    {
        if ((changeEventArgs.Value as string) == "foo")
        {
            _loggedIn = true;
        }
    }

    public async Task OnUpdate(MouseEventArgs mouseEventArgs)
    {
        UpdateButtonText = "Updating!";
        StateHasChanged();
        int.TryParse(Hours, out var hours);
        int.TryParse(Minutes, out var minutes);
        int.TryParse(Seconds, out var seconds);
        var timestamp = DateTimeOffset.UtcNow - TimeSpan.FromHours(hours) - TimeSpan.FromMinutes(minutes) - TimeSpan.FromSeconds(seconds);
        await Http.PostAsJsonAsync<WatchDto>("/api/session", new()
        {
            AdminSession = AdminSession,
            UserSession = UserSession,
            Title = Title,
            Timestamp = timestamp,
        });
        UserLink = $"{NavigationManager.Uri}{UserSession}";
        UpdateButtonText = "Updated!";
        StateHasChanged();
        await Task.Delay(1000);
        UpdateButtonText = "Update";
        StateHasChanged();

    }

    public async Task OnCopy(MouseEventArgs mouseEventArgs)
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", UserLink);
        _ = Task.Run(async () =>
        {
            CopyButtonText = "Copied!";
            StateHasChanged();
            await Task.Delay(1000);
            CopyButtonText = "Copy";
            StateHasChanged();
        });
    }
}
